# Claude Code Advanced Initialization Script v2.0
# Automatically loads persistent memory AND starts distributed cognitive system
# Microsoft-replacement grade enterprise initialization

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m' 
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}🚀 Claude Code Distributed Cognitive System v2.0${NC}"
echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

# Auto-load memory system (existing functionality)
if [[ -f "/home/player00/NixOS/agentic/memory-loader.sh" ]]; then
    echo -e "${YELLOW}📋 Loading persistent memory...${NC}"
    source "/home/player00/NixOS/agentic/memory-loader.sh"
else
    echo -e "${RED}❌ Memory loader not found${NC}"
fi

# Start distributed coordination system
echo -e "${YELLOW}🤖 Starting distributed cognitive coordination...${NC}"
if [[ -f "/home/player00/NixOS/agentic/distributed-core/session-coordinator.py" ]]; then
    # Start coordinator in background
    python3 "/home/player00/NixOS/agentic/distributed-core/session-coordinator.py" start &
    COORDINATOR_PID=$!
    echo -e "${GREEN}✅ Session coordinator started (PID: $COORDINATOR_PID)${NC}"
    
    # Give coordinator time to initialize
    sleep 2
    
    # Verify coordinator is running
    if kill -0 $COORDINATOR_PID 2>/dev/null; then
        echo -e "${GREEN}✅ Distributed system active${NC}"
    else
        echo -e "${RED}❌ Coordinator failed to start${NC}"
    fi
else
    echo -e "${RED}❌ Session coordinator not found${NC}"
fi

# Enhanced aliases and functions
alias cognition='python3 /home/player00/NixOS/agentic/cognition-protocol.py'
alias route-task='python3 /home/player00/NixOS/agentic/distributed-core/task-router.py'
alias session-status='python3 /home/player00/NixOS/agentic/distributed-core/session-coordinator.py status'
alias distributed-stop='python3 /home/player00/NixOS/agentic/distributed-core/session-coordinator.py stop'

# Intelligent task routing function (NEW)
distribute() {
    local task="$*"
    if [[ -z "$task" ]]; then
        echo -e "${RED}Usage: distribute '<task_description>'${NC}"
        return 1
    fi
    
    echo -e "${BLUE}🎯 Routing task through distributed system...${NC}"
    local routing_result=$(python3 /home/player00/NixOS/agentic/distributed-core/task-router.py "$task")
    
    echo -e "${YELLOW}📊 Task Analysis:${NC}"
    echo "$routing_result" | jq -r '.analysis | "Task Type: \(.task_type)\nComplexity: \(.complexity_score)/10\nOptimal Agent: \(.optimal_agent)\nStrategy: \(.distribution_strategy)"'
    
    echo -e "${YELLOW}🔄 Executing distributed task...${NC}"
    # This would trigger actual task execution through the distributed system
    echo -e "${GREEN}✅ Task routed to optimal agent configuration${NC}"
}

# Export functions
export -f distribute

echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}✅ Distributed cognitive framework loaded${NC}"
echo -e "${BLUE}💡 Commands:${NC}"
echo -e "${BLUE}  • distribute '<task>' - Auto-route tasks intelligently${NC}"
echo -e "${BLUE}  • cognition [protocol] - Activate specific protocols${NC}" 
echo -e "${BLUE}  • route-task '<task>' - Analyze task routing${NC}"
echo -e "${BLUE}  • session-status - Check distributed system status${NC}"
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"